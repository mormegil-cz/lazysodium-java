
/*
 * Copyright (c) Terl Tech Ltd • 14/06/19 17:54 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

plugins {
    id 'java-library'
    id 'signing'
    id 'com.vanniktech.maven.publish' version '0.34.0'
    id 'biz.aQute.bnd.builder'
}

def mavenProps = [
    artifactId: "lazysodium-java",
    groupId: "cz.mormegil",
    version: '6.0.0-SNAPSHOT',
    description: "Lazysodium (Java) makes it effortless for Java " +
        "developers to get started with Libsodium's cryptography. " +
        "(fork of the original library)"
]

repositories {
    mavenCentral()
}

group = mavenProps.groupId
version = mavenProps.version

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    manifest {
        attributes('Automatic-Module-Name': 'com.goterl.lazysodium')
    }
}

// Dependencies
dependencies {
    implementation 'net.java.dev.jna:jna:5.17.0'
    implementation 'com.goterl:resource-loader:2.0.2'
    implementation 'org.slf4j:slf4j-api:2.0.3'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

signing {
    useGpgCmd()
    sign configurations.runtimeElements
}

void loadProps() {
    File secretPropsFile = rootProject.file('local.properties')
    if (secretPropsFile.exists()) {
        Properties p = new Properties()
        new FileInputStream(secretPropsFile).withCloseable { is ->
            p.load(is)
        }
        p.each { name, value ->
            ext[(String) name] = value
        }
    }
}

loadProps()

mavenPublishing {
    publishToMavenCentral()
    signAllPublications()

    coordinates(mavenProps.groupId, mavenProps.artifactId, mavenProps.version)

    pom {
        name = mavenProps.artifactId
        description = mavenProps.description
        url = 'https://github.com/mormegil-cz/lazysodium-java'
        licenses {
            license {
                name = 'Mozilla Public License, Version 2.0'
                url = 'https://www.mozilla.org/MPL/2.0/index.txt'
                distribution = 'repo'
            }
        }
        developers {
            developer {
                name = 'Terl Tech Ltd'
                email = 'hello@terl.co'
            }
            developer {
                name = 'mormegil-cz'
                email = 'mormegil@centrum.cz'
            }
        }
        scm {
            connection = 'scm:git:git://github.com/mormegil-cz/lazysodium-java.git'
            developerConnection = 'scm:git:ssh://github.com/mormegil-cz/lazysodium-java'
            url = 'https://github.com/mormegil-cz/lazysodium-java'
        }
    }
}

// Force character encoding in case the workspace was not set up correctly
tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    // a collection to track failedTests
    ext.failedTests = []

    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            String failedTest = "${descriptor.className}::${descriptor.name}"
            logger.debug("Adding " + failedTest + " to failedTests...")
            failedTests << [failedTest]
        }
    }

    afterSuite { suite, result ->
        if (!suite.parent) { // will match the outermost suite
            // logs each failed test
            if (!failedTests.empty) {
                logger.lifecycle("Failed tests:")
                failedTests.each { failedTest ->
                    logger.lifecycle("${failedTest}")
                }
            }
        }
    }
}