
/*
 * Copyright (c) Terl Tech Ltd • 14/06/19 17:54 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

plugins {
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'biz.aQute.bnd.builder'
}

ext {
    artifactId = "lazysodium-java"
    groupId = "cz.mormegil"
    version = '5.1.5.1'
    description = "Lazysodium (Java) makes it effortless for Java " +
            "developers to get started with Libsodium's cryptography."
}

repositories {
    mavenCentral()
}


group project.ext.groupId
version = project.ext.version

mainClassName = "com.goterl.lazysodium.LazySodium"

sourceCompatibility = 1.8
targetCompatibility = 1.8


// Dependencies
dependencies {
    implementation 'net.java.dev.jna:jna:5.12.1'
    implementation 'com.goterl:resource-loader:2.0.2'
    implementation 'org.slf4j:slf4j-api:2.0.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

// Tasks
signing {
    // This will use the GPG Agent
    // to sign the jar
    useGpgCmd()
    sign publishing.publications
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


tasks.named('jar') {
    manifest {
        attributes('Automatic-Module-Name': 'com.goterl.lazysodium')
    }
}


task signPom(type: Sign) {
    sign project.file("$buildDir/publications/mavenJava/pom-default.xml")

    // The signing plugin does not seem to notice
    // it when the publications folder with the
    // signature has been deleted. So we always
    // create a new signature
    outputs.upToDateWhen { false }
}


artifacts {
    archives sourcesJar, javadocJar
}

void loadProps() {
    File secretPropsFile = project.rootProject.file('local.properties')
    if (secretPropsFile.exists()) {
        Properties p = new Properties()
        new FileInputStream(secretPropsFile).withCloseable { is ->
            p.load(is)
        }
        p.each { name, value ->
            ext[name] = value
        }
    }
}

loadProps()

// Return an empty string if a property
// cannot be found
String getProp(String propName) {
    if (ext.hasProperty(propName) != null) {
        return ext[propName]
    } else {
        return ""
    }
}

String getSonatypeUserName() {
    return findProperty("ossrhUsername")
}

String getSonatypePassword() {
    return findProperty("ossrhPassword")
}

Closure createPomClosure = {
    def root = asNode()
    root.appendNode('description', project.ext.description)
    root.appendNode('name', project.ext.artifactId)
    root.appendNode('url', 'https://github.com/mormegil-cz/lazysodium-java')

    def scm = root.appendNode('scm')
    scm.appendNode("connection", "scm:git:git://github.com/mormegil-cz/lazysodium-java.git")
    scm.appendNode("developerConnection", "scm:git:ssh://github.com/mormegil-cz/lazysodium-java")
    scm.appendNode("url", "https://github.com/mormegil-cz/lazysodium-java")

    def license = root.appendNode('licenses').appendNode('license')
    license.appendNode('name', 'Mozilla Public License, Version 2.0')
    license.appendNode('url', 'https://www.mozilla.org/MPL/2.0/index.txt')
    license.appendNode('distribution', 'repo')

    def developers = root.appendNode('developers')
    def developer1 = developers.appendNode('developer')
    developer1.appendNode('name', 'Terl Tech Ltd')
    developer1.appendNode('email', 'hello@terl.co')
    def developer2 = developers.appendNode('developer')
    developer2.appendNode('name', 'mormegil-cz')
    developer2.appendNode('email', 'mormegil@centrum.cz')
}

publishing {
    publications {
        snapshot(MavenPublication) {
            from components.java
            groupId project.ext.groupId
            artifactId project.ext.artifactId
            version project.ext.version + "-SNAPSHOT"
            artifact sourcesJar
            artifact javadocJar

            pom.withXml createPomClosure
        }
        release(MavenPublication) {
            from components.java
            groupId project.ext.groupId
            artifactId project.ext.artifactId
            version project.ext.version
            artifact sourcesJar
            artifact javadocJar

            pom.withXml createPomClosure
        }
    }

    repositories {
        maven {
            name = "release"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username getSonatypeUserName()
                password getSonatypePassword()
            }
        }
        maven {
            name = "snapshot"
            url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username getSonatypeUserName()
                password getSonatypePassword()
            }
        }
    }
}

// Force character encoding in case the workspace was not set up correctly
tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    // a collection to track failedTests
    ext.failedTests = []

    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            String failedTest = "${descriptor.className}::${descriptor.name}"
            logger.debug("Adding " + failedTest + " to failedTests...")
            failedTests << [failedTest]
        }
    }

    afterSuite { suite, result ->
        if (!suite.parent) { // will match the outermost suite
            // logs each failed test
            if (!failedTests.empty) {
                logger.lifecycle("Failed tests:")
                failedTests.each { failedTest ->
                    logger.lifecycle("${failedTest}")
                }
            }
        }
    }
}